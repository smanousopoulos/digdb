# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from datetime import datetime
from haystack import indexes
from .models import *

{% macro create_indexes_class(model_name, model) %}
class {{ model.meta.class }}Index (indexes.SearchIndex, indexes.Indexable):
        text = indexes.CharField(document=True, use_template=True)  
        category = indexes.CharField(faceted=True)

{% for name, field in model.var.iteritems() %}
{% if field.faceted %}
        {{ name }} = indexes.CharField(model_attr='{{name}}', faceted=True, null=True)
{% elif field.indexed %}
        {{ name }} = indexes.CharField(model_attr='{{name}}', null=True)
{% endif %}
{% endfor %}
        rendered = indexes.CharField(use_template=True, indexed=False)

        def get_model(self):
            return {{ model.meta.class }}

        def prepare_category(self, obj):
            return "{{ model.meta.label }}"

{% for name, field in model.var.iteritems() %}
{% if field.faceted %}
        def prepare_{{ field.name }}(self, obj):
            return obj.get_field_display("{{ field.name }}").get('value') 
{% endif %}
{% endfor %}

{% endmacro %}

# Models index classes
{% for class_name, model in class_models.iteritems() %}
{{ create_indexes_class(class_name, model) }}
{% endfor %}

# Sec Models index classes
#{% for class_name, model in sec_models.iteritems() %}
#{{ "{{" }} create_indexes_class(class_name, model) {{ "}}" }}
##{% endfor %}
