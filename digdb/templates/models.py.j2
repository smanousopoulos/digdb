# -*- coding: utf-8 -*-

{% macro create_model_class(model_name, model) %}
class {{ model.meta.class }} (models.Model, FieldHelperMixin):

{% for name, field in model.var.iteritems() %}
{% if field.type == "ForeignKey" %}
    {{ name }} = models.ForeignKey('{{ field.model }}', related_name = '{{ field.related_name }}', 
            {{- 'verbose_name=_("%s"), ' % field.verbose_name if field.verbose_name else '' }}
            {{- 'blank=False, ' % field.blank if field.blank else 'blank=True, null=True, ' }} on_delete=models.CASCADE)
{% elif field.type == "ManyToManyField" %}
    {{ name }} = models.ManyToManyField('{{ field.model }}', related_name = '{{ class_name }}_{{ field.related_name }}',
            {{- 'verbose_name=_("%s"), ' % field.verbose_name if field.verbose_name else '' }}
            {{- 'blank=False, ' % field.blank if field.blank else 'blank=True, ' }})
{% elif field.type == 'models.IntegerField' %}
    {{ name }} = {{ field.type }}({{ 'help_text=_("%s"), ' % field.help_text if field.help_text else '' }}
            {{- 'blank=False, ' if field.blank else 'blank=True, null=True, ' }}
            {{- 'unique=True, ' if field.unique }}
            {{- 'verbose_name=_("%s"), ' % field.verbose_name if field.verbose_name else '' }}
            {{- 'default=%s, ' % field.default if field.default else '' }}
            {{- 'validators=%s, ' % field.validators if field.validators else '' }})
{% elif field.type == 'models.DecimalField' %}
    {{ name }} = {{ field.type }}({{ 'max_digits=%s, ' % field.max_digits if field.max_digits else '' }}
            {{- 'decimal_places=%s, ' % field.decimal_places if field.decimal_places  else ''}}
            {{- 'help_text=_("%s"), ' % field.help_text if field.help_text else '' }}
            {{- 'blank=False, ' if field.blank else 'blank=True, null=True, ' }}
            {{- 'unique=True, ' if field.unique }}
            {{- 'editable=False, ' if field.editable else '' }}
            {{- 'verbose_name=_("%s"), ' % field.verbose_name if field.verbose_name else '' }}
            {{- 'default=%s, ' % field.default if field.default else '' }}
            {{- 'validators=%s, ' % field.validators if field.validators else '' }})
{% elif field.type == 'models.DateField' %}
    {{ name }} = {{ field.type }}({{ 'help_text=_("%s"), ' % field.help_text if field.help_text else '' }}
            {{- 'blank=False, ' if field.blank else 'blank=True, null=True, ' }}
            {{- 'verbose_name=_("%s"), ' % field.verbose_name if field.verbose_name else '' }}
            {{- 'default=%s, ' % field.default if field.default else '' }}
            {{- 'editable=False, ' if field.editable else '' }}
            {{- 'validators=%s, ' % field.validators if field.validators else '' }})
{% elif field.type == 'ImageWithThumbsField' %}
    {{ name }} = {{ field.type }}({{- 'help_text=_("%s"), ' % field.help_text if field.help_text else '' }}
            {{- 'blank=False, ' if field.blank else 'blank=True, null=True, ' }}
            {{- 'unique=True, ' if field.unique }}
            {{- 'editable=False, ' if field.editable else '' }}
            {{- 'verbose_name=_("%s"), ' % field.verbose_name if field.verbose_name else '' }}
            {{- 'upload_to="photos",' }}
            {{- 'sizes=((200,200),),' }})
{% else %}
    {{ name }} = {{ field.type }}({{ 'max_length=%s, ' % field.max_length if field.max_length else '' }}
            {{- 'help_text=_("%s"), ' % field.help_text if field.help_text else '' }}
            {{- 'blank=False, ' if field.blank else 'blank=True, null=True, ' }}
            {{- 'unique=True, ' if field.unique }}
            {{- 'editable=False, ' if field.editable else '' }}
            {{- 'verbose_name=_("%s"), ' % field.verbose_name if field.verbose_name else '' }}
            {{- 'choices=%s, ' % field.choices if field.choices else '' }}
            {{- 'default="%s", ' % field.default if field.default else '' }}
            {{- 'validators=%s, ' % field.validators if field.validators else '' }})
{% endif %}
{% endfor %}

    class Meta:
{% if model.meta.label %}
        verbose_name = "{{ model.meta.label }}"
{% else %}
        pass
{% endif %}
    def get_type(self):
        return '{{model_name}}'
    
    def __str__(self):
        return self.get_url()

    def get_url(self):
        return '{0}/id/{1}'.format(self.get_type(), self.pk)
    
    def get_edit_url(self):
        return '/admin/{0}/{1}/{2}'.format(APP_NAME, "".join(self.get_type().split("_")), self.pk)

    def get_thumbnail(self):
{% if model.meta.thumb and model.meta.thumb.found %}
{% if model.meta.thumb.type == 'self' %}
        return self.{{ model.meta.thumb.field }}.url_200x200
{% elif model.meta.thumb.type == 'rel' %}
        items = self.{{ model.meta.thumb.sec_model }}.all()
        return items[0].{{ model.meta.thumb.field }}.url_200x200 if items and len(items) > 0 else static('unknown.png')
{% endif %}
{% else %}
        return None
{% endif %}

{% if model.meta.default_field %}
    def __unicode__(self):
        return self.{{ model.meta.default_field }}
{% endif %}
{% endmacro %}

from __future__ import unicode_literals
from django.db import models
from datetime import datetime
from django.core.validators import RegexValidator, MinLengthValidator, MaxLengthValidator
from django.contrib.staticfiles.templatetags.staticfiles import static
from django.utils.translation import ugettext_lazy as _
from multiselectfield import MultiSelectField
from django_thumbs.db.models import ImageWithThumbsField

from .apps import DigDBConfig 

APP_NAME = DigDBConfig.name

class FieldHelperMixin(object):

    def get_field_display(self, field_name):
        field = self._meta.get_field(field_name)
        label = None
        value = None
        # resolve picklists/choices, with get_xyz_display() function
        get_choice = 'get_'+field_name+'_display'
        if hasattr(self, get_choice):
            label = field.verbose_name
            value = getattr(self, get_choice)()
        elif field.is_relation and field.one_to_many:
            if hasattr(self, field.name) and field.one_to_many:
                value = []
                for sec_item in getattr(self, field.name).all():
                    label = sec_item._meta.verbose_name
                    value.append(sec_item.get_all_fields())
        elif field.is_relation and field.many_to_one:
            pass
        else:
            label = field.verbose_name
            try:
                value = getattr(self, field_name)
            except AttributeError:
                value = None

        if label or value:
          return {
             'label': label, 
             'name': field.name,
             'value':value,
             'type': type(value).__name__
          }

    def get_all_fields(self):
      """Returns a list of all field names on the instance."""
      fields = []
      for f in self._meta.get_fields():
          field_display = self.get_field_display(f.name)  
          if field_display:
            fields.append(field_display)
      return fields
    
# Static choices
{% for choice, vals in static.choices.iteritems() %}
{{ choice }} = {{ vals }} 

{% endfor %}

# Model classes
{% for class_name, model in class_models.iteritems() %}

{{ create_model_class(class_name, model) }}
{% endfor %}
{% for sec_class_name, sec_model in sec_models.iteritems() %}
{{ create_model_class(sec_class_name, sec_model) }}
{% endfor %}


